(in-package :raptor-launcher/raptor-chat)
(in-readtable :qtools)

(define-widget spellchecked-text-edit (qtextedit)
  (;; (delay :accessor delay :initarg :delay :initform 500)
   ;; (cursors :accessor cursors :initform '())
   ;; (selections :accessor selections :initform '())
   ))

;; (define-subwidget (spellchecked-text-edit timer) (q+:make-qtimer)
;;   (setf (q+:single-shot timer) t))

;; (define-slot (spellchecked-text-edit spellchecked-text-changed) ()
;;   (declare (connected spellchecked-text-edit (text-changed)))
;;   ;; (mapc #'finalize selections)
;;   ;; (setf selections '())
;;   ;; (mapc #'finalize cursors)
;;   ;; (setf cursors '())
;;   ;; (q+:start timer delay)
;;   )

;; (define-slot (spellchecked-text-edit timer-timeout) ()
;;   (declare (connected timer (timeout)))
;;   ;; TODO start from current cursor position
;;   (spellcheck spellchecked-text-edit))

(defgeneric spellcheck (text-exit &optional start)
  (:method ((text-edit spellchecked-text-edit) &optional (start 0))
    (%spellcheck text-edit start)))

(defun %spellcheck (text-edit start)
  (with-slots-bound (text-edit spellchecked-text-edit)
    (with-finalizing ((cursor (q+:text-cursor text-edit)))
      (let* ((done nil))
        (setf (q+:position cursor) start)
        (when (q+:at-end cursor) (setf (q+:position cursor) 0))
        (do ((gone-over nil))
            ((or done (q+:at-end cursor)))
          (select-next-word text-edit cursor)
          (let* ((word (q+:selected-text cursor)))
            (when (string/= "" word)
              (unless (spell:english-lookup word)
                (setf done t)
                (setf (q+:text-cursor text-edit) cursor)))
            (q+:move-position cursor (q+:qtextcursor.next-character))
            (when (q+:at-end cursor)
              (cond (gone-over
                     (setf done t))
                    (t (setf gone-over t)
                       (q+:move-position cursor (q+:qtextcursor.start)))))))))))

(defun select-next-word (text-edit cursor)
  (when (q+:at-end cursor)
    (q+:move-position cursor (q+:qtextcursor.start)))
  (let ((text (q+:to-plain-text text-edit)))
    (loop for position from (q+:position cursor) downto 0
          for char = (aref text position)
          if (funcall (disjoin #'alpha-char-p (curry #'eql #\')) char)
            do (q+:move-position cursor (q+:qtextcursor.previous-character))
          else do (loop-finish))
    (loop for position from (q+:position cursor) below (length text)
          for char = (aref text position)
          if (funcall (disjoin #'alpha-char-p (curry #'eql #\')) char)
            do (loop-finish)
          else do (q+:move-position cursor (q+:qtextcursor.next-character)))
    (loop for position from (q+:position cursor) below (length text)
          for char = (aref text position)
          if (funcall (disjoin #'alpha-char-p (curry #'eql #\')) char)
            do (q+:move-position cursor (q+:qtextcursor.next-character)
                                 (q+:qtextcursor.keep-anchor))
          else do (loop-finish))
    (when (q+:at-end cursor)
      (q+:move-position cursor (q+:qtextcursor.start)))))
#|
;; Wait for https://github.com/commonqt/commonqt/issues/37 to get fixed
(defun %%spellcheck (text-edit start)
  (with-slots-bound (text-edit spellchecked-text-edit)
    (let* ((predicate (conjoin #'alpha-char-p (curry #'eql #\')))
           (cursor (q+:make-qtextcursor (q+:document text-edit))))
      (do () ((q+:at-end cursor))
        (q+:move-position cursor (q+:qtextcursor.end-of-word)
                          (q+:qtextcursor.keep-anchor))
        (let* ((selection (q+:selected-text cursor))
               (word (remove-if predicate selection)))
          (unless (spell:english-lookup word)
            (let ((selection (print (q+:make-qtextedit-extraselection)))
                  (old-position nil))
              (setf (q+:cursor selection) cursor
                    (q+:format selection) (make-spellcheck-qtextcharformat))
              (push cursor cursors)
              (push selection selections)
              (setf old-position (q+:position cursor)
                    cursor (q+:make-qtextcursor (q+:document text-edit))
                    (q+:position cursor) old-position)))
          (setf (q+:position cursor) (q+:position cursor))))
      (finalize cursor)
      (#_setExtraSelections text-edit selections)
      ;; (setf (q+:extra-selections text-edit) selections)
      )))

(defun make-spellcheck-qtextcharformat ()
  (let ((format (q+:make-qtextcharformat)))
    (setf (q+:underline-color format) (q+:make-qcolor "red")
          (q+:underline-style format)
          (q+:qtextcharformat.spell-check-underline))
    format))
|#
